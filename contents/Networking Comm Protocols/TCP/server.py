import socket
import queue
import threading
import os
import time


''' AUTOGENERATED BY CHAT GPT '''

# create a queue for the packets of data.
packets_queue = queue.Queue()
LOG = open('server.log', '+a')
def poll_for_filecreation():
    while os.path.exists('./lease_data.bin') is False:
        LOG.write('File does not exist yet.\n')
        time.sleep(1)
    
    LOG('File exists. Exiting thread.\n')
    return

polling_thread = threading.Thread(target=poll_for_filecreation)


def start_server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('localhost', 65432))  # Bind to localhost and port 65432
    server_socket.listen()  # Start listening for incoming connections
    
    print("Server is listening...")
    conn, addr = server_socket.accept()  # Accept a connection
    print(f"Connected by {addr}")
    
    packet_id = 0
    while True:
        data = conn.recv(4096)  # Receive data (up to 1024 bytes)
        if not data:
            break
        else:
            packet_id += 1
            packets_queue.put(data)
            LOG.write(f'Just wrote packet {packet_id} to queue.\n')
        #conn.sendall(data)  # Echo the data back to the client
    
    if packets_queue.qsize() > 0:
        output_to_file()
    else:
        LOG.write('Queue empty, not writing to file\n')
    
    conn.close()  # Close the connection
    polling_thread.join() # Close the thread
    validate_success()

def validate_success():
    original_file = open('lease.pdf', 'rb')
    received_file = open('lease_data.bin' ,'rb')

    if len(original_file) != len (received_file):
        LOG.write('File sizes do not equal.\n')
    else:
        LOG.write('File sizes are equal.\n')

def output_to_file():
    packet_id = 0
    with open('lease_data.bin', 'wb') as output_file:
        while not packets_queue.empty():
            packet = packets_queue.get()
            packet_id += 1
            LOG.write(f'Just took {packet_id} out of queue\n')
            output_file.write(packet)
            output_file.write(b'\n')
        output_file.close()

if __name__ == "__main__":
    start_server()
